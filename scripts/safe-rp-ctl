#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'

SAFE_RP_CTL_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
ROOT_DIR="$(cd "$SAFE_RP_CTL_DIR/.." && pwd)"
export ROOT_DIR

# Load deployment configuration if present
if [[ -f "$ROOT_DIR/deploy.conf" ]]; then
  # shellcheck disable=SC1091
  source "$ROOT_DIR/deploy.conf"
fi

# shellcheck source=lib/core.sh
source "$SAFE_RP_CTL_DIR/lib/core.sh"
# shellcheck source=lib/docker_ops.sh
source "$SAFE_RP_CTL_DIR/lib/docker_ops.sh"
# shellcheck source=lib/release_ops.sh
source "$SAFE_RP_CTL_DIR/lib/release_ops.sh"
# shellcheck source=lib/manifest_ops.sh
source "$SAFE_RP_CTL_DIR/lib/manifest_ops.sh"
# shellcheck source=lib/ssh_ops.sh
source "$SAFE_RP_CTL_DIR/lib/ssh_ops.sh"

cmd="${1:-}"
shift || true
case "$cmd" in
  build-local)
    rc_build_local "$@"
    ;;
  start)
    rc_start "$@"
    ;;
  deploy-prod)
    rc_deploy_prod
    ;;
  rollback)
    rc_rollback "$@"
    ;;
  fetch-seed)
    rc_fetch_seed "$@"
    ;;
  clone-prod)
    log_warn "Command 'clone-prod' is deprecated. Use 'fetch-seed' instead."
    rc_fetch_seed "$@"
    ;;
  list-releases)
    rc_list_releases
    ;;
  describe-release)
    rc_describe_release "$@"
    ;;
  init-wip)
    rc_init_wip "$@"
    ;;
  build-prep)
    rc_build_prep "$@"
    ;;
  build-ship)
    rc_build_ship "$@"
    ;;
  start-seed)
    rc_start_seed "$@"
    ;;
  start-wip)
    rc_start_wip "$@"
    ;;
  start-prep)
    rc_start_prep "$@"
    ;;
  start-ship)
    rc_start_ship "$@"
    ;;
  init-stage)
    rc_init_stage "$@"
    ;;
  stop-all)
    rc_stop_all "$@"
    ;;
  ensure-external)
    rc_ensure_external_services "$@"
    ;;
  start-env)
    # New deterministic environment starter
    # Usage: safe-rp-ctl start-env <environment> [runtime-source]
    # Examples: 
    #   safe-rp-ctl start-env ship
    #   safe-rp-ctl start-env stage /path/to/runtime
    if [[ $# -lt 1 ]] || [[ "$1" =~ ^-+h(elp)?$ ]]; then
      log_info "Usage: start-env <environment> [runtime-source]"
      echo
      log_info "Available environments:"
      log_info "  ship    - Local final verification (ports 8083/8446)"
      log_info "  stage   - IONOS staging deployment (ports 80/443)"
      log_info "  preprod - Pre-production verification (ports 80/443)"
      log_info "  prod    - Production deployment (ports 80/443)"
      echo
      log_info "Examples:"
      log_info "  safe-rp-ctl start-env ship              # Use prep runtime"
      log_info "  safe-rp-ctl start-env stage /path/runtime  # Use custom runtime"
      exit 1
    fi
    rc_start_environment "$@"
    ;;
  lock-wip)
    rc_lock_wip "$@"
    ;;
  unlock-wip)
    rc_unlock_wip "$@"
    ;;
  wip-status)
    rc_wip_status "$@"
    ;;
  *)
    log_error "Unknown command: $cmd"
    echo
    log_info "Available commands:"
    log_info "  Legacy pipeline:"
    log_info "    fetch-seed      - Fetch production snapshot"
    log_info "    init-wip        - Initialize work-in-progress"
    log_info "    build-prep      - Build clean runtime"
    log_info "    build-ship      - Build self-contained deployment package"
    log_info "    start-seed      - Start production replica (port 8080)"
    log_info "    start-wip       - Start development workspace (port 8081)"
    log_info "    start-prep      - Start clean build (port 8082)"
    log_info "    start-ship      - Start final verification (port 8083)"
    echo
    log_info "  Deterministic environments (Type-5):"
    log_info "    start-env <env> - Start any environment (ship/stage/preprod/prod)"
    echo
    log_info "  WIP Management:"
    log_info "    lock-wip        - Lock WIP workspace to protect manual fixes"
    log_info "    unlock-wip      - Unlock WIP workspace to allow modifications" 
    log_info "    wip-status      - Show WIP workspace lock status and details"
    echo
    log_info "  Utilities:"
    log_info "    stop-all        - Stop all local containers"
    log_info "    ensure-external - Start external services"
    exit 1
    ;;
esac
